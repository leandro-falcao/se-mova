{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/le/Desktop/mova-se/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/le/Desktop/mova-se/src/components/CountDown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport styles from '../styles/components/CountDown.module.css';\nvar countDownTimeout;\nexport function CountDown() {\n  _s();\n\n  var _useState = useState(0.2 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinish = _useState3[0],\n      setHasFinish = _useState3[1]; // tempo do relogio contados dado em minutos X segundos\n\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  var _String$padStart$spli = String(minutes).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1];\n\n  function startCountDown() {\n    setIsActive(true);\n  } //pausar nosso relogio e iniciar de onde parou.\n  // function pauseCountDown(){\n  //    clearTimeout(countDownTimeout);\n  //    setIsActive(false)\n  // }\n  // resetar para os 25 novamente!\n\n\n  function resetCountDown() {\n    clearTimeout(countDownTimeout);\n    setIsActive(false);\n    setTime(0.2 * 60);\n  }\n\n  useEffect(function () {\n    if (isActive === true && time > 0) {\n      countDownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      // setHasFinish(true);\n      // setIsActive(false);\n      console.log(\"finalizou o contador\");\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countDownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 10\n    }, this), isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"\".concat(styles.countDownButton, \" \").concat(styles.countDownButtonActive),\n      onClick: resetCountDown,\n      children: \"Reset Contador\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.countDownButton,\n      onClick: startCountDown,\n      children: \"Start Contador\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n}\n\n_s(CountDown, \"/qrdlc+SZ/LS61iVm+WYDp14YEA=\");\n\n_c = CountDown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountDown\");","map":{"version":3,"sources":["/home/le/Desktop/mova-se/src/components/CountDown.tsx"],"names":["useState","useEffect","styles","countDownTimeout","CountDown","time","setTime","isActive","setIsActive","hasFinish","setHasFinish","minutes","Math","floor","seconds","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","startCountDown","resetCountDown","clearTimeout","setTimeout","console","log","countDownContainer","countDownButton","countDownButtonActive"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport styles from '../styles/components/CountDown.module.css';\n\nlet countDownTimeout: NodeJS.Timeout; \n\nexport function CountDown(){\n\n   const [time, setTime] = useState(0.2 * 60);\n   const [isActive, setIsActive] = useState(false);\n   const [hasFinish, setHasFinish] = useState(false);\n\n   // tempo do relogio contados dado em minutos X segundos\n   const minutes = Math.floor(time / 60); \n   const seconds = time % 60;\n\n   const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split(''); \n   \n   const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split(''); \n\n   function startCountDown(){\n      setIsActive(true);\n   }\n   \n   //pausar nosso relogio e iniciar de onde parou.\n   // function pauseCountDown(){\n   //    clearTimeout(countDownTimeout);\n   //    setIsActive(false)\n   // }\n   \n   // resetar para os 25 novamente!\n   function resetCountDown(){\n      clearTimeout(countDownTimeout);\n      setIsActive(false)\n      setTime(0.2 * 60)\n}\n\n   useEffect( ()=>{\n      if( isActive === true && time > 0){\n         countDownTimeout = setTimeout(() => {\n               setTime( time - 1 )     \n            }, 1000); \n      } else if(isActive && time === 0){\n         // setHasFinish(true);\n         // setIsActive(false);\n         console.log(\"finalizou o contador\");\n         \n      }\n\n\n   }, [isActive, time])\n   \n   return(\n      <div>\n\n         <div className={styles.countDownContainer}>\n            <div>\n               <span>{minuteLeft}</span>\n               <span>{minuteRight}</span>\n            </div>\n\n            <span>:</span>\n            \n            <div>\n               <span>{secondLeft}</span>\n               <span>{secondRight}</span>\n            </div>\n            \n         </div>\n\n         {isActive ? \n            (\n                <button type=\"button\" \n                  className={`${styles.countDownButton} ${styles.countDownButtonActive}`} \n                  onClick={resetCountDown}>\n                  Reset Contador\n               </button>                  \n            ) \n         : \n         (\n            <button type=\"button\" \n               className={styles.countDownButton} \n               onClick={startCountDown}>\n               Start Contador\n            </button>   \n         )    \n         }\n      </div>\n   );\n}"]},"metadata":{},"sourceType":"module"}