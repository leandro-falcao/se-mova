{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/le/Desktop/mova/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge();\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ChallengesProvider, \"IDVxXaKVFd+/4zWgrdFssD4qVSE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/le/Desktop/mova/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAuBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAGP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAE7CJ,QAAQ,CAAC,CAAD,CAFqC;AAAA,MAEhEK,KAFgE;AAAA,MAEzDC,QAFyD;;AAAA,mBAIrBN,QAAQ,CAAC,CAAD,CAJa;AAAA,MAIhEO,iBAJgE;AAAA,MAI7CC,oBAJ6C;;AAAA,mBAMjBR,QAAQ,CAAC,CAAD,CANS;AAAA,MAMhES,mBANgE;AAAA,MAM3CC,sBAN2C;;AAAA,mBAQzBV,QAAQ,CAAC,IAAD,CARiB;AAAA,MAQhEW,eARgE;AAAA,MAQ/CC,kBAR+C;;AAUvE,WAASC,OAAT,GAAmB;AAChBP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AAEF;;AAED,WAASS,iBAAT,GAA6B;AAC1B,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB;AACpB;;AAED,sBACG,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAChCP,MAAAA,KAAK,EAALA,KADgC;AAEhCE,MAAAA,iBAAiB,EAAjBA,iBAFgC;AAGhCE,MAAAA,mBAAmB,EAAnBA,mBAHgC;AAIhCI,MAAAA,OAAO,EAAPA,OAJgC;AAKhCC,MAAAA,iBAAiB,EAAjBA,iBALgC;AAMhCH,MAAAA,eAAe,EAAfA;AANgC,KAAnC;AAAA,cAQIP;AARJ;AAAA;AAAA;AAAA;AAAA,UADH;AAaF;;GAnCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\n\nimport challenges from '../../challenges.json';\n\n\ninterface Challenge {\n   type: string;\n   description: string;\n   amount: number;\n}\n\ninterface ChallengesContextData {\n   level: number;\n   currentExperience: number;\n   activeChallenge: Challenge;\n   challengesCompleted: number;\n   levelUp: () => void;\n   startNewChallenge: () => void;\n}\n\n\ninterface ChallengesProvidesProps {\n   children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\n\nexport function ChallengesProvider({ children }: ChallengesProvidesProps) {\n\n   const [level, setLevel] = useState(1);\n\n   const [currentExperience, setCurrentExperience] = useState(0);\n\n   const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n   const [activeChallenge, setActiveChallenge] = useState(null);\n\n   function levelUp() {\n      setLevel(level + 1);\n\n   }\n\n   function startNewChallenge() {\n      const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n      const challenge = challenges[randomChallengeIndex];\n\n      setActiveChallenge()\n   }\n\n   return (\n      <ChallengesContext.Provider value={{\n         level,\n         currentExperience,\n         challengesCompleted,\n         levelUp,\n         startNewChallenge,\n         activeChallenge\n      }}>\n         {children}\n      </ChallengesContext.Provider >\n   )\n\n}\n"]},"metadata":{},"sourceType":"module"}