{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/le/Desktop/mova-se/src/components/CountDown.tsx\";\nimport { useState, useEffect, useContext } from 'react';\nimport { ChallengesContext } from '../contexts/ChallengesContext';\nimport styles from '../styles/components/CountDown.module.css';\nlet countDownTimeout;\nexport function CountDown() {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false); // tempo do relogio contados dado em minutos X segundos\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n\n  function startCountDown() {\n    setIsActive(true);\n  } // resetar para os 25 novamente!\n\n\n  function resetCountDown() {\n    clearTimeout(countDownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive === true && time > 0) {\n      countDownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countDownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }, this), hasFinished ? /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      type: \"button\",\n      className: styles.countDownButton,\n      onClick: resetCountDown,\n      children: \"Ciclo Encerrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `${styles.countDownButton} ${styles.countDownButtonActive}`,\n        onClick: resetCountDown,\n        children: \"Reset Ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.countDownButton,\n        onClick: startCountDown,\n        children: \"Start Cico\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n}","map":{"version":3,"sources":["/home/le/Desktop/mova-se/src/components/CountDown.tsx"],"names":["useState","useEffect","useContext","ChallengesContext","styles","countDownTimeout","CountDown","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","startCountDown","resetCountDown","clearTimeout","setTimeout","countDownContainer","countDownButton","countDownButtonActive"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react';\n\nimport { ChallengesContext } from '../contexts/ChallengesContext';\n\nimport styles from '../styles/components/CountDown.module.css';\n\nlet countDownTimeout: NodeJS.Timeout;\n\nexport function CountDown() {\n\n   const { startNewChallenge } = useContext(ChallengesContext);\n\n   const [time, setTime] = useState(0.1 * 60);\n   const [isActive, setIsActive] = useState(false);\n   const [hasFinished, setHasFinished] = useState(false);\n\n   // tempo do relogio contados dado em minutos X segundos\n   const minutes = Math.floor(time / 60);\n   const seconds = time % 60;\n\n   const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n\n   const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n\n   function startCountDown() {\n      setIsActive(true);\n   }\n\n   // resetar para os 25 novamente!\n   function resetCountDown() {\n      clearTimeout(countDownTimeout);\n      setIsActive(false)\n      setTime(0.1 * 60)\n   }\n\n   useEffect(() => {\n      if (isActive === true && time > 0) {\n         countDownTimeout = setTimeout(() => {\n            setTime(time - 1)\n         }, 1000);\n      }\n      else if (isActive && time === 0) {\n         setHasFinished(true);\n         setIsActive(false);\n         startNewChallenge();\n\n      }\n   }, [isActive, time])\n\n\n   return (\n      <div>\n\n         <div className={styles.countDownContainer}>\n            <div>\n               <span>{minuteLeft}</span>\n               <span>{minuteRight}</span>\n            </div>\n\n            <span>:</span>\n\n            <div>\n               <span>{secondLeft}</span>\n               <span>{secondRight}</span>\n            </div>\n\n         </div>\n\n         { hasFinished ?\n            (\n               <button\n                  disabled\n                  type=\"button\"\n                  className={styles.countDownButton}\n                  onClick={resetCountDown}>\n                  Ciclo Encerrado\n               </button>\n            ) : (\n               <>\n                  {isActive ? (\n                     <button type=\"button\"\n                        className={`${styles.countDownButton} ${styles.countDownButtonActive}`}\n\n                        onClick={resetCountDown}>\n                        Reset Ciclo\n                     </button>\n                  )\n\n                     :\n\n                     (\n                        <button type=\"button\"\n                           className={styles.countDownButton}\n                           onClick={startCountDown}>\n                           Start Cico\n                        </button>\n                     )\n                  }\n               </>\n            )}\n\n      </div>\n   )\n}"]},"metadata":{},"sourceType":"module"}